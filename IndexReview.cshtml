@{
    Layout = null;
    TheHandyGuys.Models.Skill skill = ViewBag.skill as TheHandyGuys.Models.Skill;
    TheHandyGuys.Models.Rating rating = ViewBag.rating as TheHandyGuys.Models.Rating;
    var reviews = ViewBag.reviews as List<TheHandyGuys.Models.Review>;
    string fullName = skill.User.first_name + " " + skill.User.last_name;
    // Create a list of colors
    List<string> colors = new List<string>
        {
            "Red",
            "Blue",
            "Purple",
            "green"
        };

    // Create a random object
    Random random = new Random();




}

@functions {
    public string GetFirstLetters(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return string.Empty;

        // Split the string into words
        string[] words = input.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        // Ensure there are at least two words
        if (words.Length < 2)
            return string.Empty;

        // Get the first letters of the first two words
        char firstLetter = words[0][0];
        char secondLetter = words[1][0];

        // Return the result as a string
        return $"{firstLetter}{secondLetter}".ToUpper(); // Convert to uppercase if needed
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@fullName - @skill.Category Reviews</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        }

        body {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 240px;
            background-color: #1c3b6a;
            padding: 20px;
            color: white;
        }

        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 12px;
            margin-bottom: 10px;
            cursor: pointer;
            border-radius: 8px;
            gap: 10px;
        }

            .sidebar-item:hover {
                background-color: #5ca8d2;
            }

        /* Main Content */
        .main-content {
            flex-grow: 1;
            padding: 20px;
            background-color: #ffffff;
        }

        .profile-container {
            background-color: white;
        }

        .profile-header {
            display: flex;
            align-items: center;
            border-bottom: 1px solid #e9ecef;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }

        .profile-avatar {
            width: 80px;
            height: 80px;
            background-color: #1c3b6a;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            margin-right: 20px;
        }

        .profile-info h1 {
            color: #2c3e50;
            margin-bottom: 5px;
        }

        .review-container {
            background-color: white;
            max-width: 600px;
            margin: 0 auto;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .section-title {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }

        /* Provider Profile */
        .provider-profile {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
        }

        .provider-avatar {
            width: 80px;
            height: 80px;
            background-color: #3498db;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            margin-right: 20px;
        }

        .provider-info h2 {
            margin-bottom: 5px;
            color: #2c3e50;
        }

        /* Star Rating */
        .star-rating {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

            .star-rating input {
                display: none;
            }

            .star-rating label {
                font-size: 30px;
                color: #ddd;
                cursor: pointer;
                transition: color 0.2s;
            }

                .star-rating label:hover,
                .star-rating label:hover ~ label,
                .star-rating input:checked ~ label {
                    color: #ffc107;
                }

        /* Form Styles */
        .form-group {
            margin-bottom: 20px;
        }

            .form-group label {
                display: block;
                margin-bottom: 8px;
                color: #2c3e50;
                font-weight: 600;
            }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 16px;
        }

            .form-control:focus {
                outline: none;
                border-color: #3498db;
                box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.25);
            }

        /* Button Styles */
        .btn {
            display: inline-block;
            padding: 10px 20px;
            border-radius: 4px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: #3498db;
            color: white;
            border: none;
            width: 100%;
            margin-top: 20px;
        }

            .btn-primary:hover {
                background-color: #2980b9;
            }

        /* Skill Tags */
        .skill-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .skill-tag {
            background-color: #e9ecef;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            color: #495057;
        }

        .star-filled {
            color: #FFD700;
        }

        .star-empty {
            color: #E0E0E0;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <div class="bg-white shadow-md rounded-lg overflow-hidden">
            <div class="bg-blue-600 text-white p-6">
                <div class="flex items-center">
                    <div class="w-16 h-16 bg-blue-400 rounded-full flex items-center justify-center text-2xl font-bold mr-4">
                        @GetFirstLetters(fullName)
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold">@fullName</h1>
                        <p class="text-blue-200">@skill.Category</p>
                    </div>
                </div>
            </div>

            <div class="p-6">
                <div class="flex items-center mb-6">
                    <div class="text-4xl font-bold mr-4">@rating.avg_rating</div>
                    <div>
                        <div class="flex text-3xl mb-2" id="ratingDiv">
                            
                        </div>
                        <div class="text-gray-600">Based on @rating.n_of_ratings Reviews</div>
                    </div>
                </div>

                <div class="flex justify-center space-x-4 mb-6">
                    <button id="filter-high-stars" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                        3 Stars and Above
                    </button>
                    <button id="filter-low-stars" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition">
                        2 Stars and Below
                    </button>
                </div>

                <div id="reviews-container" class="space-y-6">
                    @if(reviews != null && reviews.Any())

                    {
                        foreach (var review in reviews)
                        {
                            // Get a random index
                            int randomIndex = random.Next(colors.Count);

                            // Pick a random color
                            string randomColor = colors[randomIndex].ToLower();

                            string reviewName = review.User.first_name + " " + review.User.last_name;
                        <div class="bg-gray-50 p-4 rounded-lg review-item" data-rating="@review.rating">
                            <div class="flex justify-between items-center mb-2">
                                <div class="flex items-center">
                                    <div class="w-8 h-8 bg-@randomColor-500 text-white rounded-full flex items-center justify-center mr-3">
                                        @GetFirstLetters(reviewName)
                                    </div>
                                    <span class="font-semibold">@reviewName</span>
                                </div>
                                <div class="text-yellow-500 text-xl" data-rating="@review.rating">
                                </div>
                            </div>
                            <p class="text-gray-700">@review.review1</p>
                            @{string formattedDate = review.date.HasValue ? review.date.Value.ToString("MMMM dd, yyyy") : "No date";
                            }

                            <div class="text-sm text-gray-500 mt-2">@formattedDate</div>
                        </div>
                        }
                    }
                    
                </div>

            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const lowStarsBtn = document.getElementById('filter-low-stars');
            const highStarsBtn = document.getElementById('filter-high-stars');
            const reviewsContainer = document.getElementById('reviews-container');
            const reviewItems = document.querySelectorAll('.review-item');

            lowStarsBtn.addEventListener('click', () => {
                // Update button styles
                lowStarsBtn.classList.add('bg-blue-600', 'text-white');
                lowStarsBtn.classList.remove('bg-gray-200', 'text-gray-800');
                highStarsBtn.classList.remove('bg-blue-600', 'text-white');
                highStarsBtn.classList.add('bg-gray-200', 'text-gray-800');

                // Filter reviews
                reviewItems.forEach(item => {
                    const rating = parseInt(item.getAttribute('data-rating'));
                    item.style.display = rating <= 2 ? 'block' : 'none';
                });
            });

            highStarsBtn.addEventListener('click', () => {
                // Update button styles
                highStarsBtn.classList.add('bg-blue-600', 'text-white');
                highStarsBtn.classList.remove('bg-gray-200', 'text-gray-800');
                lowStarsBtn.classList.remove('bg-blue-600', 'text-white');
                lowStarsBtn.classList.add('bg-gray-200', 'text-gray-800');

                // Filter reviews
                reviewItems.forEach(item => {
                    const rating = parseInt(item.getAttribute('data-rating'));
                    item.style.display = rating >= 3 ? 'block' : 'none';
                });
            });
        });
        function generateStarRating(rating) {
            const stars = 5;
            const fullStars = Math.floor(rating);
            const remainder = rating % 1;

            let starsHtml = "";
            for (let i = 0; i < stars; i++) {
                if (i < fullStars) {
                    // Full star
                    starsHtml += '<span class="star-filled">★</span>';
                } else if (i === fullStars && remainder > 0) {
                    // Partially filled star with gradient
                    starsHtml += `
                    <span class="star partial" style="
                        background: linear-gradient(to right,
                            gold ${remainder * 100}%,
                            #ccc ${remainder * 100}%
                        );
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                    ">★</span>`;
                } else {
                    // Empty star
                    starsHtml += '<span class="star-empty">☆</span>';
                }
            }
            return starsHtml;
        }
        const ratingDiv = document.getElementById("ratingDiv");
        const rating = @rating.avg_rating; // Example rating
        ratingDiv.innerHTML = generateStarRating(rating);

        const ratings = document.querySelectorAll('.text-yellow-500');

        // Loop through each element and apply the function
        ratings.forEach(ratingElement => {
            const rating = parseFloat(ratingElement.getAttribute('data-rating')); // Get the rating from data attribute
            ratingElement.innerHTML = generateStarRating(rating); // Apply the generated stars
        });

    </script>
    </body>
</html>
